	digraph PREPROCESADOR { 					
		rankdir=LR;			
		labelloc=t;			
		decorate=true;			
		labelfloat=false;			
		fontname=Helvetica;			
		ranksep=equally;			
					
		subgraph cluster_0 {			
			style=filled;		
			color=lightgrey;		
		    "*comienzoDeLinea" [shape=box,fontsize=40, height=5, width=5]; 			
		    enPalabra [shape=box, height=1, width=1]; 			
		    restoDeLinea [shape=box, height=1, width=1];						
		    posibleIncludeDefineUndef [shape=box, height=1, width=1];			
			label = "INICIO";		
		}			
					
		numeralIncorrecto [shape=box, height=1, width=1];			
					
		subgraph cluster_1 {			
			style=filled;		
			color=lightgrey;		
			comentarioFinDeLinea [shape=box, height=1, width=1];		
			comentarioMultilinea [shape=box, height=1, width=1];		
			posibleFinDeComentarioMultilinea [shape=box, height=1, width=1];			
			posibleComentario [shape=box, height=1, width=1];		
			label = "COMENTARIOS";		
		}			
					
		subgraph cluster_2 {			
			style=filled;		
			color=lightgrey;		
			aperturaComillasSimples [shape=box, height=1, width=1];		
			entreComillasSimples [shape=box, height=1, width=1];			
			label = "COMILLAS_SIMPLES";		
		}			
					
		subgraph cluster_3 {			
			style=filled;		
			color=lightgrey;		
			aperturaComillasDobles [shape=box, height=1, width=1];				
			entreComillasDobles [shape=box, height=1, width=1];		
			label = "COMILLAS_DOBLES";		
		}			
					
		subgraph cluster_4 {			
			style=filled;		
			color=lightgrey;		
			d [shape=box, height=1, width=1];		
			de [shape=box, height=1, width=1];		
			def [shape=box, height=1, width=1];		
			defi [shape=box, height=1, width=1];		
			defin [shape=box, height=1, width=1];		
			define [shape=box, height=1, width=1];		
			defineEspacio [shape=box, height=1, width=1];		
			defineIdentificador [shape=box, height=1, width=1];		
			identificadorInvalido [shape=box, height=1, width=1];		
			defineIdentificadorEspacio [shape=box, height=1, width=1];		
			textoDefineInvalido [shape=box, height=1, width=1];		
			defineTexto [shape=box, height=1, width=1];		
			label = "DEFINE";		
		}			
					
		subgraph cluster_5 {			
			style=filled;		
			color=lightgrey;		
			u [shape=box, height=1, width=1];		
			un [shape=box, height=1, width=1];		
			und [shape=box, height=1, width=1];		
			unde [shape=box, height=1, width=1];		
			esUndef [shape=box, height=1, width=1];		
			undefEspacio [shape=box, height=1, width=1];		
			undefIdentificador [shape=box, height=1, width=1];		
			label = "UNDEF";		
		}			
					
		subgraph cluster_6 {			
			style=filled;		
			color=lightgrey;		
			i [shape=box, height=1, width=1];		
			in [shape=box, height=1, width=1];		
			inc [shape=box, height=1, width=1];		
			incl [shape=box, height=1, width=1];		
			inclu [shape=box, height=1, width=1];		
			includ [shape=box, height=1, width=1];		
			include [shape=box, height=1, width=1];		
			includeEspacio [shape=box, height=1, width=1];		
			includeComillas [shape=box, height=1, width=1];		
			includePath [shape=box, height=1, width=1];			
			pathInvalido [shape=box, height=1, width=1];		
			label = "INCLUDE";		
		}			
					
	    comentarioFinDeLinea -> "*comienzoDeLinea" [label = " c == '\\n' \n putchar(' '), putchar(c)"];				
	    comentarioFinDeLinea -> comentarioFinDeLinea [label = " EOC "];				
					
	    comentarioMultilinea -> posibleFinDeComentarioMultilinea [label = " c == '*' "];				
	    comentarioMultilinea -> comentarioMultilinea [label = " EOC "];				
					
	    posibleFinDeComentarioMultilinea -> posibleFinDeComentarioMultilinea [label = " c == '*' "];				
	    posibleFinDeComentarioMultilinea -> restoDeLinea [label = " c == '/' \n putchar(' ')"];				
	    posibleFinDeComentarioMultilinea -> comentarioMultilinea [label = " EOC "];				
					
	    restoDeLinea -> posibleComentario [label = " c == '/' "];				
	    restoDeLinea -> aperturaComillasSimples [label = " c == ' \n putchar(c)"];				
	    restoDeLinea -> aperturaComillasDobles [label = " c == \" \n putchar(c)"];				
	    restoDeLinea -> "*comienzoDeLinea" [label = " c == '\\n' \n putchar(c) "];								
	    restoDeLinea -> enPalabra [label = " c == '_' or c == 'A'...'Z' or c == 'a'...'z' \n nuevaPalabra(c) "];				
	    restoDeLinea -> restoDeLinea [label = " EOC \n putchar(c)"];				
					
	    posibleComentario -> "*comienzoDeLinea" [label = " c == '\\n' \n putchar(/), putchar(c)"];				
	    posibleComentario -> comentarioFinDeLinea [label = " c == '/' "];				
	    posibleComentario -> aperturaComillasSimples [label = " c == ' \n putchar(/), putchar(c)"];				
	    posibleComentario -> aperturaComillasDobles [label = " c == \" \n putchar(/), putchar(c) "];				
	    posibleComentario -> comentarioMultilinea [label = " c == '*' "];							
	    posibleComentario -> enPalabra [label = " c == '_' or c == 'A'...'Z' or c == 'a'...'z' \n putchar(/), nuevaPalabra(c)"];				
	    posibleComentario -> restoDeLinea [label = " EOC \n putchar(/), putchar(c)"];				
					
	    enPalabra -> "*comienzoDeLinea" [label = " c == '\\n' \n verificaEnTabla(), putchar(c) "];				
	    enPalabra -> aperturaComillasSimples [label = " c == ' \n verificaEnTabla(), putchar(c) "];				
	    enPalabra -> aperturaComillasDobles [label = " c == \" \n verificaEnTabla(), putchar(c)  "];				
	    enPalabra -> posibleComentario [label = " c == '/' \n verificaEnTabla() "];						
	    enPalabra -> enPalabra [label = " c == '_' or c == 'A'...'Z' or c == 'a'...'z' \n nuevoCaracterEnPalabra() "];				
	    enPalabra -> restoDeLinea [label = " EOC \n verificaEnTabla(), putchar(c) "];								
					
	    "*comienzoDeLinea" -> "*comienzoDeLinea" [label = " c == '\\n' \n putchar(c) "];				
	    "*comienzoDeLinea" -> aperturaComillasSimples [label = " c == ' \n putchar(c)"];				
	    "*comienzoDeLinea" -> aperturaComillasDobles [label = " c == \" \n putchar(c)"];				
	    "*comienzoDeLinea" -> posibleComentario [label = " c == '/' "];								
	    "*comienzoDeLinea" -> enPalabra [label = " c == '_' or c == 'A'...'Z' or c == 'a'...'z' \n nuevaPalabra(c)"];				
	    "*comienzoDeLinea" -> posibleIncludeDefineUndef [label = " c == '#' "];				
	    "*comienzoDeLinea" -> restoDeLinea [label = " EOC \n putchar(c)"];				
					
	    aperturaComillasSimples -> restoDeLinea [label = " c == ' \n putchar(c)"];				
	    aperturaComillasSimples -> entreComillasSimples [label = " EOC \n putchar(c)"];				
					
	    entreComillasSimples -> restoDeLinea [label = " c == ' \n putchar(c)"];				
	    entreComillasSimples -> entreComillasSimples [label = " EOC \n putchar(c)"];							
					
	    aperturaComillasDobles -> restoDeLinea [label = " c == \" \n putchar(c) "];				
	    aperturaComillasDobles -> entreComillasDobles [label = " EOC \n putchar(c)"];				
					
	    entreComillasDobles -> restoDeLinea [label = " c == \" \n putchar(c)"];				
	    entreComillasDobles -> entreComillasDobles [label = " EOC \n putchar(c)"];								
					
	    posibleIncludeDefineUndef -> d [label = " c == 'd' "];				
	    posibleIncludeDefineUndef -> u [label = " c == 'u' "];				
	    posibleIncludeDefineUndef -> i [label = " c == 'i' "];				
	    posibleIncludeDefineUndef -> numeralIncorrecto [label = " EOC \n putchar('#'), putchar(c)"];				
					
	    d -> de [label = "c == 'e' " ];				
	    d -> numeralIncorrecto [label = "c == EOC" ];				
					
	    de -> def [label = "c == 'f'" ];				
	    de -> numeralIncorrecto [label = "c == EOC " ];				
					
	    def -> defi [label = "c == 'i' " ];				
	    def -> numeralIncorrecto [label = "c == EOC " ];				
					
	    defi -> defin [label = "c == 'n' " ];				
	    defi -> numeralIncorrecto [label = "c == EOC " ];				
					
	    defin -> define [label = "c == 'e' " ];				
	    defin -> numeralIncorrecto [label = "c == EOC " ];				
					
	    define -> defineEspacio [label = "c == ' '  or c == '\\t' "];				
	    define -> numeralIncorrecto [label = "c == EOC " ];				
					
	    defineEspacio -> defineIdentificador [label = " c == '_' or c == 'A'...'Z' or c == 'a'...'z', nuevoIdentificador(c) "];				
	    defineEspacio -> defineEspacio [label = " c == ' ' or c == '\\t' "];				
	    defineEspacio -> identificadorInvalido [label = " EOC "];				
					
	    defineIdentificador -> defineIdentificador [label = "c == '_' or c == 'A'...'Z' or c == 'a'...'z' or c == '0'...'9' \n nuevoCaracterIdentificador(c)" ];				
	    defineIdentificador -> defineIdentificadorEspacio [label = "c == ' ' or c == '\\t' " ];				
	    defineIdentificador -> identificadorInvalido [label = " EOC " ];				
					
	    defineIdentificadorEspacio -> defineIdentificadorEspacio [label = "c == ' ' or c == '\\t' " ];				
	    defineIdentificadorEspacio -> textoDefineInvalido [label = "c == '\\n' " ];				
	    defineIdentificadorEspacio -> defineTexto [label = " EOC, nuevoTextoDefine(c) " ];				
					
	    defineTexto -> "*comienzoDeLinea" [label = "c == '\\n', set(identificador,textoDefine()) " ];				
	    defineTexto -> defineTexto [label = " EOC, nuevoCaracterTextoDefine(c) " ];				
					
	    u -> un [label = "c == 'n' " ];				
	    u -> numeralIncorrecto [label = "c == EOC " ];				
					
	    un -> und [label = "c == 'd' " ];				
	    un -> numeralIncorrecto [label = "c == EOC " ];				
					
	    und -> unde [label = "c == 'e' " ];				
	    und -> numeralIncorrecto [label = "c == EOC " ];				
					
	    unde -> esUndef [label = "c == 'f' " ];				
	    unde -> numeralIncorrecto [label = "c == EOC " ];				
					
	    esUndef -> undefEspacio [label = "c == ' ' or c == '\\t' " ];				
	    esUndef -> numeralIncorrecto [label = "c == EOC " ];				
					
	    undefEspacio -> undefIdentificador [label = "c == '_' or c =='A'...'Z' or c =='a'...'z' \n nuevoIdentificador(c)" ];				
	    undefEspacio -> undefEspacio [label = "c == ' ' or c == '\\t' " ];				
	    undefEspacio -> identificadorInvalido [label = " EOC " ];				
					
	    undefIdentificador -> undefIdentificador [label = "c == '_' or c == 'A'...'Z' or c == 'a'...'z' or '0'...'9' \n nuevoCaracterIdentificador(c)" ];				
	    undefIdentificador -> "*comienzoDeLinea" [label = "c == '\\n \n delete(identificador) " ];				
	    undefIdentificador -> identificadorInvalido [label = " EOC " ];				
					
		i -> in [label = "c == 'n' " ];			
	    i -> numeralIncorrecto [label = "c == EOC" ];				
					
	    in -> inc [label = "c == 'c'" ];				
	    in -> numeralIncorrecto [label = "c == EOC " ];				
					
	    inc -> incl [label = "c == 'l' " ];				
	    inc -> numeralIncorrecto [label = "c == EOC " ];				
					
	    incl -> inclu [label = "c == 'u' " ];				
	    incl -> numeralIncorrecto [label = "c == EOC " ];				
					
	    inclu -> includ [label = "c == 'd' " ];				
	    inclu -> numeralIncorrecto [label = "c == EOC " ];				
					
	    includ -> include [label = "c == 'e' "];				
	    includ -> numeralIncorrecto [label = "c == EOC " ];				
					
		include -> includeEspacio [label = "c == ' '  or c == '\\t' "];			
	    include -> numeralIncorrecto [label = "c == EOC " ];				
					
	    includeEspacio -> includeComillas [label = " c == \" "];				
	    includeEspacio -> includeEspacio [label = " c == ' ' or c == '\\t' "];				
	    includeEspacio -> pathInvalido [label = " EOC "];				
					
		includeComillas -> pathInvalido [label = " c == '<' or c == '>' or c == ':' or c == '/' or c == '\\' or c == '?'  '*' "];			
	    includeComillas -> includePath [label = " EOC \n nuevoPath(c)"];				
					
	    includePath -> pathInvalido [label = "c == '<' or c == '>' or c == ':' or c == '/' or c == '\\' or c == '?' c == '*' " ];	
	    includePath -> restoDeLinea [label = "c == \" \n if(traerArchivoInclude()) "];				
	    includePath -> includePath [label = " EOC \n nuevoCaracterPath(c)" ];							
					
	}				
